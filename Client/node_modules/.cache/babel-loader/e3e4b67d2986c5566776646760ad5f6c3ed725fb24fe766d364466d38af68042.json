{"ast":null,"code":"import { ADD_FAV, REMOVE_FAV, FILTER, ORDER } from \"./Types\";\nconst initialState = {\n  myFavorites: [],\n  allCharacters: []\n};\n\n/* function rootReducer(state = initialState, { type, payload }) {\r\n  switch (type) {\r\n    case ADD_FAV:\r\n      return { ...state, myFavorites: payload, allCharacters: payload };\r\n    case REMOVE_FAV:\r\n      return { ...state, myFavorites: payload };\r\n    case FILTER:\r\n      let copy2 = [...state.allCharacters];\r\n      let genderFilter = copy2.filter((character) => {\r\n        return character.gender === payload;\r\n      });\r\n      return {\r\n        ...state,\r\n        myFavorites: genderFilter,\r\n      };\r\n    case ORDER:\r\n      let copy3 = [...state.allCharacters];\r\n      return {\r\n        ...state,\r\n        myFavorites: copy3.sort((a, b) => {\r\n          return payload === \"A\" ? a.id - b.id : b.id - a.id;\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n} */\n\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  switch (type) {\n    case ADD_FAV:\n      return {\n        ...state,\n        myFavorites: payload,\n        allCharacters: payload\n      };\n    case REMOVE_FAV:\n      return {\n        ...state,\n        myFavorites: payload\n      };\n    case FILTER:\n      let copy2 = [...state.myFavorites];\n      let genderFilter = copy2.filter(character => {\n        return character.gender === payload;\n      });\n      // Utiliza genderFilter para mostrar las cartas filtradas en la interfaz de usuario\n      return state;\n    case ORDER:\n      let copy3 = [...state.myFavorites];\n      let sortedCharacters = copy3.sort((a, b) => {\n        return payload === \"A\" ? a.id - b.id : b.id - a.id;\n      });\n      // Utiliza sortedCharacters para mostrar las cartas ordenadas en la interfaz de usuario\n      return state;\n    default:\n      return state;\n  }\n}\nexport default rootReducer;","map":{"version":3,"names":["ADD_FAV","REMOVE_FAV","FILTER","ORDER","initialState","myFavorites","allCharacters","rootReducer","state","arguments","length","undefined","type","payload","copy2","genderFilter","filter","character","gender","copy3","sortedCharacters","sort","a","b","id"],"sources":["C:/Users/alumno/Desktop/Henry/rick_and_morty - copia/rick_and_morty/Client/src/redux/Reducer.js"],"sourcesContent":["import { ADD_FAV, REMOVE_FAV, FILTER, ORDER } from \"./Types\";\r\n\r\nconst initialState = {\r\n  myFavorites: [],\r\n  allCharacters: [],\r\n};\r\n\r\n/* function rootReducer(state = initialState, { type, payload }) {\r\n  switch (type) {\r\n    case ADD_FAV:\r\n      return { ...state, myFavorites: payload, allCharacters: payload };\r\n    case REMOVE_FAV:\r\n      return { ...state, myFavorites: payload };\r\n    case FILTER:\r\n      let copy2 = [...state.allCharacters];\r\n      let genderFilter = copy2.filter((character) => {\r\n        return character.gender === payload;\r\n      });\r\n      return {\r\n        ...state,\r\n        myFavorites: genderFilter,\r\n      };\r\n    case ORDER:\r\n      let copy3 = [...state.allCharacters];\r\n      return {\r\n        ...state,\r\n        myFavorites: copy3.sort((a, b) => {\r\n          return payload === \"A\" ? a.id - b.id : b.id - a.id;\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n} */\r\n\r\nfunction rootReducer(state = initialState, { type, payload }) {\r\n  switch (type) {\r\n    case ADD_FAV:\r\n      return { ...state, myFavorites: payload, allCharacters: payload };\r\n    case REMOVE_FAV:\r\n      return { ...state, myFavorites: payload };\r\n    case FILTER:\r\n      let copy2 = [...state.myFavorites];\r\n      let genderFilter = copy2.filter((character) => {\r\n        return character.gender === payload;\r\n      });\r\n      // Utiliza genderFilter para mostrar las cartas filtradas en la interfaz de usuario\r\n      return state;\r\n    case ORDER:\r\n      let copy3 = [...state.myFavorites];\r\n      let sortedCharacters = copy3.sort((a, b) => {\r\n        return payload === \"A\" ? a.id - b.id : b.id - a.id;\r\n      });\r\n      // Utiliza sortedCharacters para mostrar las cartas ordenadas en la interfaz de usuario\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nexport default rootReducer;\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,QAAQ,SAAS;AAE5D,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,EAAE;EACfC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAWA,CAAA,EAA0C;EAAA,IAAzCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,YAAY;EAAA,IAAE;IAAEQ,IAAI;IAAEC;EAAQ,CAAC,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC1D,QAAQC,IAAI;IACV,KAAKZ,OAAO;MACV,OAAO;QAAE,GAAGQ,KAAK;QAAEH,WAAW,EAAEQ,OAAO;QAAEP,aAAa,EAAEO;MAAQ,CAAC;IACnE,KAAKZ,UAAU;MACb,OAAO;QAAE,GAAGO,KAAK;QAAEH,WAAW,EAAEQ;MAAQ,CAAC;IAC3C,KAAKX,MAAM;MACT,IAAIY,KAAK,GAAG,CAAC,GAAGN,KAAK,CAACH,WAAW,CAAC;MAClC,IAAIU,YAAY,GAAGD,KAAK,CAACE,MAAM,CAAEC,SAAS,IAAK;QAC7C,OAAOA,SAAS,CAACC,MAAM,KAAKL,OAAO;MACrC,CAAC,CAAC;MACF;MACA,OAAOL,KAAK;IACd,KAAKL,KAAK;MACR,IAAIgB,KAAK,GAAG,CAAC,GAAGX,KAAK,CAACH,WAAW,CAAC;MAClC,IAAIe,gBAAgB,GAAGD,KAAK,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC1C,OAAOV,OAAO,KAAK,GAAG,GAAGS,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAGF,CAAC,CAACE,EAAE;MACpD,CAAC,CAAC;MACF;MACA,OAAOhB,KAAK;IACd;MACE,OAAOA,KAAK;EAChB;AACF;AAGA,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}